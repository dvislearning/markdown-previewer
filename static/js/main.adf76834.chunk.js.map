{"version":3,"sources":["GetInput.js","initialtext.js","App.js","serviceWorker.js","index.js"],"names":["GetInput","react_default","a","createElement","id","autoFocus","value","this","props","input","onChange","Component","initialText","marked","setOptions","breaks","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","markup","event","setState","target","text","sanitize","className","src_GetInput","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAUeA,0LANP,OACQC,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAASC,WAAS,EAACC,MAAOC,KAAKC,MAAMC,MAAOC,SAAUH,KAAKC,MAAME,kBAHvEC,cCqCRC,EAvCA,61CCMfC,IAAOC,WAAW,CAChBC,QAAQ,QA6CKC,cAzCb,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KACDe,MAAM,CAACd,MAAOG,GAGnBK,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKU,OAASV,EAAKU,OAAOF,KAAZP,OAAAQ,EAAA,EAAAR,CAAAD,IANEA,4EASNW,GACZrB,KAAKsB,SAAS,CAACpB,MAAOmB,EAAME,OAAOxB,uCAG7ByB,GACJ,OAAQlB,IAAOkB,EAAM,CAACC,UAAU,qCAKhC,OACE/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAAR,0BAA6CH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAAR,OAE/CH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAAR,eACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAAgBH,EAAAC,EAAAC,cAAC+B,EAAD,CAAUzB,MAAOF,KAAKgB,MAAMd,MAAOC,SAAUH,KAAKiB,iBAE5EvB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,mBACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBAAR,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAU+B,wBAA0B,CAACC,OAAQvB,IAAON,KAAKgB,MAAMd,qBAjCnEE,aCEE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.adf76834.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass GetInput extends Component {\n    render() {\n        return (\n                <textarea id=\"editor\" autoFocus value={this.props.input} onChange={this.props.onChange}></textarea>\n        );\n    }\n};\n\nexport default GetInput;\n","let initialText = `# DV's Markdown Previewer\n\n## Markdown Made Easier\n\n***\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nMarkdown is a simple to use, and elegant way to create easily readable, marked-up text.  Composing markdown can be challenging, however, because you have to guess how your text will look while you're typing it.\n\n**DV's Markdown Previewer** solves this problem!  Simply write markdown to the left, and it will be instantaneously rendered to the right as formatted text.\n\nMost features of Markdown are supported, including: \n\n* [links](https://www.youtube.com/watch?v=wZZ7oFKsKzY) \n* inline code\n* code blocks\n* list items\n* block quotes\n* images\n* bolded and italicized text\n\n\nFeel free to use inline html right on markdown.  Just remember to place it around some backticks \n\n\\`<h3>LIKE THIS</h3>\\`\n\nOr use blockquotes to provide testimonials about this application\n\n> \"It's pretty cool, It's alright. I guess.\"\n\nYou can also use programming code with markdown\n\n\\`\\`\\`javaScript\nlet emotions=[confused, mischievous];\nconsole.log(emotions);\n\\`\\`\\`\n\nDV's Markdown previewer is made with React and is a project in the curriculum of [FreeCodeCamp](https://learn.freecodecamp.org/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer/)`\n\nexport default initialText;","import React, { Component } from 'react';\nimport './App.css';\nimport GetInput from './GetInput';\nimport initialText from './initialtext'\nimport marked from 'marked';\n\nmarked.setOptions({\n  breaks: true,\n});\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={input: initialText};\n\n\n    this.handleChange = this.handleChange.bind(this);\n    this.markup = this.markup.bind(this);\n  }\n\n handleChange(event) {\n  this.setState({input: event.target.value})\n }\n\n markup(text) {\n    return  marked(text, {sanitize: true})\n  };\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div id=\"App-container\">\n          <div id=\"header\">\n            <div id=\"header-text\">DV'S MARKDOWN PREVIEWER<div id=\"header-blink\">_</div></div>\n          </div>\n          <div id=\"content\">\n            <div id=\"editor-section\">\n              <div id=\"editor-header\">E D I T O R</div>\n              <div id=\"editor-output\"><GetInput input={this.state.input} onChange={this.handleChange}/></div>\n            </div>\n            <div id=\"preview-section\">\n              <div id=\"preview-header\">P R E V I E W</div>\n              <div id=\"preview\" dangerouslySetInnerHTML={ {__html: marked(this.state.input) } }></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}